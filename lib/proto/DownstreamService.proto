syntax = "proto3";

import "AgentConfig.proto";
import "Trace.proto";
import "Profile.proto";
import "Common.proto";

package org_glowroot_wire_api_model;

option java_package = "org.glowroot.wire.api.model";

service DownstreamService {
  rpc connect (stream AgentResponse) returns (stream CentralRequest);
}

message CentralRequest {
  int64 request_id = 1;
  oneof message {
    HelloAck hello_ack = 100;
    AgentConfigUpdateRequest agent_config_update_request = 200;

    // LiveJvmService
    ThreadDumpRequest thread_dump_request = 300;
    JstackRequest jstack_request = 308;
    AvailableDiskSpaceRequest available_disk_space_request = 301;
    HeapDumpRequest heap_dump_request = 302;
    HeapHistogramRequest heap_histogram_request = 309;
    GcRequest gc_request = 303;
    MBeanDumpRequest mbean_dump_request = 304;
    MatchingMBeanObjectNamesRequest matching_mbean_object_names_request = 305;
    MBeanMetaRequest mbean_meta_request = 306;
    SystemPropertiesRequest system_properties_request = 310;
    CapabilitiesRequest capabilities_request = 307;

    // LiveWeavingService
    GlobalMetaRequest global_meta_request = 400;
    PreloadClasspathCacheRequest preload_classpath_cache_request = 401;
    MatchingClassNamesRequest matching_class_names_request = 402;
    MatchingMethodNamesRequest matching_method_names_request = 403;
    MethodSignaturesRequest method_signatures_request = 404;
    ReweaveRequest reweave_request = 405;

    // LiveTraceRepository
    HeaderRequest header_request = 500;
    EntriesRequest entries_request = 501;
    MainThreadProfileRequest main_thread_profile_request = 502;
    AuxThreadProfileRequest aux_thread_profile_request = 503;
    FullTraceRequest full_trace_request = 504;
  }
}

message AgentResponse {
  int64 request_id = 1;
  oneof message {
    Hello hello = 100;
    AgentConfigUpdateResponse agent_config_update_response = 200;

    // LiveJvmService
    ThreadDumpResponse thread_dump_response = 300;
    JstackResponse jstack_response = 308;
    AvailableDiskSpaceResponse available_disk_space_response = 301;
    HeapDumpResponse heap_dump_response = 302;
    HeapHistogramResponse heap_histogram_response = 309;
    GcResponse gc_response = 303;
    MBeanDumpResponse mbean_dump_response = 304;
    MatchingMBeanObjectNamesResponse matching_mbean_object_names_response = 305;
    MBeanMetaResponse mbean_meta_response = 306;
    SystemPropertiesResponse system_properties_response = 310;
    CapabilitiesResponse capabilities_response = 307;

    // LiveWeavingService
    GlobalMetaResponse global_meta_response = 400;
    PreloadClasspathCacheResponse preload_classpath_cache_response = 401;
    MatchingClassNamesResponse matching_class_names_response = 402;
    MatchingMethodNamesResponse matching_method_names_response = 403;
    MethodSignaturesResponse method_signatures_response = 404;
    ReweaveResponse reweave_response = 405;

    // LiveTraceRepository
    HeaderResponse header_response = 500;
    EntriesResponse entries_response = 501;
    MainThreadProfileResponse main_thread_profile_response = 502;
    AuxThreadProfileResponse aux_thread_profile_response = 503;
    FullTraceResponse full_trace_response = 504;

    UnknownRequestResponse unknown_request_response = 10000;
    ExceptionResponse exception_response = 10001;
  }
}

message Hello {
  string agent_id = 1;
}

message HelloAck {
}

message AgentConfigUpdateRequest {
  AgentConfig agent_config = 1;
}

message AgentConfigUpdateResponse {
}

message ThreadDumpRequest {
}

message ThreadDumpResponse {
  ThreadDump thread_dump = 1;
}

message JstackRequest {
}

message JstackResponse {
  string jstack = 1;
  bool unavailable_due_to_running_in_jre = 2;
}

message AvailableDiskSpaceRequest {
  string directory = 1;
}

message AvailableDiskSpaceResponse {
  int64 available_bytes = 1;
  bool directory_does_not_exist = 2;
}

message HeapDumpRequest {
  string directory = 1;
}

message HeapDumpResponse {
  HeapDumpFileInfo heap_dump_file_info = 1;
  bool directory_does_not_exist = 2;
}

message HeapHistogramRequest {
}

message HeapHistogramResponse {
  HeapHistogram heap_histogram = 1;
  bool unavailable_due_to_running_in_jre = 2;
}

message GcRequest {
}

message GcResponse {
}

message MBeanDumpRequest {
  MBeanDumpKind kind = 1;
  repeated string object_name = 2; // not relevant for ALL_MBEANS_WITH_ATTRS

  enum MBeanDumpKind {
    ALL_MBEANS_INCLUDE_ATTRIBUTES = 0;
    ALL_MBEANS_INCLUDE_ATTRIBUTES_FOR_SOME = 1;
    SOME_MBEANS_INCLUDE_ATTRIBUTES = 2;
  }
}

message MBeanDumpResponse {
  MBeanDump mbean_dump = 1;
}

message MatchingMBeanObjectNamesRequest {
  string partial_object_name = 1;
  int32 limit = 2;
}

message MatchingMBeanObjectNamesResponse {
  repeated string object_name = 1;
}

message MBeanMetaRequest {
  string object_name = 1;
}

message MBeanMetaResponse {
  MBeanMeta mbean_meta = 1;
}

message SystemPropertiesRequest {
}

message SystemPropertiesResponse {
  map<string, string> system_properties = 1;
}

message CapabilitiesRequest {
}

message CapabilitiesResponse {
  Capabilities capabilities = 1;
}

message GlobalMetaRequest {
}

message GlobalMetaResponse {
  GlobalMeta global_meta = 1;
}

message PreloadClasspathCacheRequest {
}

message PreloadClasspathCacheResponse {
}

message MatchingClassNamesRequest {
  string partial_class_name = 1;
  int32 limit = 2;
}

message MatchingClassNamesResponse {
  repeated string class_name = 1;
}

message MatchingMethodNamesRequest {
  string class_name = 1;
  string partial_method_name = 2;
  int32 limit = 3;
}

message MatchingMethodNamesResponse {
  repeated string method_name = 1;
}

message MethodSignaturesRequest {
  string class_name = 1;
  string method_name = 2;
}

message MethodSignaturesResponse {
  repeated MethodSignature method_signature = 1;
}

message ReweaveRequest {
}

message ReweaveResponse {
  int32 class_update_count = 1;
}

message HeaderRequest {
  string trace_id = 1;
}

message HeaderResponse {
  Trace.Header header = 1;
}

message EntriesRequest {
  string trace_id = 1;
}

message EntriesResponse {
  repeated Trace.Entry entry = 1;
  // sends full_text_sha1, beginning_text, ending_text if sha1 is known to already exist in the
  // central collector, otherwise sends only full_text (with no expectation that sha1 will be stored
  // in the central collector)
  repeated Trace.SharedQueryText shared_query_text = 2;
}

message MainThreadProfileRequest {
  string trace_id = 1;
}

message MainThreadProfileResponse {
  Profile profile = 1;
}

message AuxThreadProfileRequest {
  string trace_id = 1;
}

message AuxThreadProfileResponse {
  Profile profile = 1;
}

message FullTraceRequest {
  string trace_id = 1;
}

message FullTraceResponse {
  Trace trace = 1;
  repeated string shared_query_text = 2;
}

message UnknownRequestResponse {
}

message ExceptionResponse {
}

message ThreadDump {

  repeated Transaction transaction = 1;
  repeated Thread unmatched_thread = 2;
  Thread thread_dumping_thread = 3;
  bool jstack_available = 4; // deprecated in 0.9.2

  message Transaction {
    string headline = 6;
    string transaction_type = 1;
    string transaction_name = 2;
    int64 total_duration_nanos = 3;
    OptionalInt64 total_cpu_nanos = 7; // across all threads
    // trace id is only included if a trace will be stored for this transaction
    // (e.g. the transaction exceeds the slow threshold)
    string trace_id = 4;
    repeated Thread thread = 5;
  }

  message Thread {
    string name = 1;
    int64 id = 5;
    string state = 2;
    string lock_name = 3; // deprecated in 0.9.2, replaced by lock_info
    LockInfo lock_info = 6;
    OptionalInt64 lock_owner_id = 7;
    repeated StackTraceElement stack_trace_element = 4;
  }

  message StackTraceElement {
    string class_name = 1;
    string method_name = 2;
    string file_name = 3;
    // sint since often negative
    sint32 line_number = 4;
    repeated LockInfo monitor_info = 5;
  }

  message LockInfo {
    string class_name = 1;
    int32 identity_hash_code = 2;
  }
}

message HeapDumpFileInfo {
  string file_path = 1;
  int64 file_size_bytes = 2;
}

message HeapHistogram {

  repeated ClassInfo class_info = 1;

  message ClassInfo {
    string class_name = 1;
    int64 bytes = 2;
    int64 count = 3;
  }
}

message MBeanDump {

  repeated MBeanInfo mbean_info = 1;

  message MBeanInfo {
    string object_name = 1;
    repeated MBeanAttribute attribute = 2;
  }

  message MBeanAttribute {
    string name = 1;
    MBeanValue value = 2;
  }

  message MBeanValue {
    bool null = 1;
    oneof val {
      string string = 2;
      double double = 3;
      int64 long = 4;
      bool boolean = 5;
      MBeanValueList list = 10;
      MBeanValueMap map = 11;
    }
  }

  message MBeanValueList {
    repeated MBeanValue value = 1;
  }

  message MBeanValueMap {
    repeated MBeanValueMapEntry entry = 1;
  }

  message MBeanValueMapEntry {
    string key = 1;
    MBeanValue value = 2;
  }
}

message MBeanMeta {
  bool unmatched = 1;
  bool unavailable = 2;
  repeated string attribute_name = 3;
}

message Capabilities {
  Availability thread_cpu_time = 1;
  Availability thread_contention_time = 2;
  Availability thread_allocated_bytes = 3;
}

message Availability {
  bool available = 1;
  string reason = 2; // only sent when availability is false
}

message GlobalMeta {
  bool jvm_out_of_sync = 1;
  bool jvm_retransform_classes_supported = 2;
}

message MethodSignature {
  string name = 1;
  repeated string parameter_type = 2;
  string return_type = 3;
  repeated string modifier = 4; // not using int32 modifier in spirit of protobuf cross-language
}
